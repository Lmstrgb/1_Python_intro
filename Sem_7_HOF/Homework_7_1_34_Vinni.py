# 7.1[34]: Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку разобраться в его кричалках не настолько просто, 
# насколько легко он их придумывает, Вам стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число 
# гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова, если во фразе несколько слов, то они 
# разделяются дефисами. Фразы отделяются друг от друга пробелами.
# Написать функцию, которая принимает строку текста и проверяет ее ритм (по Винни-Пуху)
# Если ритм есть, функция возвращает True, иначе возвращает False

# Примеры/Тесты:
#      <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам") -> True
#      <function_name>("пара-ра-рам рам-пум-пупам па-ре-по-дам") -> True
#      <function_name>("пара-ра-рам рам-пуум-пупам па-ре-по-дам") -> False
#      <function_name>("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па") -> False
#      <function_name>("Пам-парам-пурум Пум-пурум-карам") -> True
#  Примечание.

# Подумайте об эффективности алгоритма. Какие структуры данных будут более эффективны по скорости.
# Алгоритм должен работать так, чтобы не делать лишних проверок. Подумайте, возможно некоторые проверки не нужны.
# (*) Усложнение.

# Функция имеет параметр, который определяет, надо ли возвращать полную информацию о кол-ве гласных букв в фразах. Эта информация 
# возвращается в виде списка словарей. Каждый элемент списка(словарь) соответствует фразе.

# Примеры/Тесты:
#      <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам", False) -> True
#      <function_name>("пара-ра-рам рам-пам-папам па-ра-па-дам", True) -> (True, [{'а': 4}, {'а': 4}, {'а': 4}])
#      <function_name>("пара-ра-рам рам-пум-пупам па-ре-по-дам") -> (True, [{'а': 4}, {'а': 2, 'у': 2}, {'а': 2, 'е': 1, 'о': 1}])
#      <function_name>("пара-ра-рам рам-пуум-пупам па-ре-по-дам") -> (False, [{'а': 4}, {'а': 2, 'у': 3}])
#      <function_name>("Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па") -> (False, [{'а': 11}, {'у': 6, 'а': 3}])
#      <function_name>("Пам-парам-пурум Пум-пурум-карам") -> (True, [{'а': 3, 'у': 2}, {'у': 3, 'а': 2}])

str_ritm = "пара-ра-рам рам-пам-папам па-ра-па-дам"  # ->True
#str_ritm = "пара-ра-рам рам-пум-пупам па-ре-по-дам" #->True
#str_ritm = "пара-ра-рам рам-пуум-пупам па-ре-по-дам" #->False
#str_ritm = "Трам-пара-папам-парам-па-пам-пам-па Пум-пурум-пу-пурум-трам-пам-па" #->False
#str_ritm = "Пам-парам-пурум Пум-пурум-карам" #->True

list_ritm=str_ritm.split()
set_vowels={'а', 'е', 'ё', 'и', 'о', 'у', 'ы', 'э', 'ю', 'я', 'А', 'Е', 'Ё', 'И', 'О', 'У', 'Ы', 'Э', 'Ю', 'Я'}

vowels_list = []

for word in list_ritm:
    vowels_in_word = ''
    for letter in word:
        if letter in set_vowels:
            vowels_in_word += letter
    vowels_list.append(vowels_in_word)

# попытка применить функцию высшего порядка :-)
def HOF(f,obj):
    buf=len(obj[0])
    if len(obj)==0: return None
    for item in obj:
        if f(item) != buf: return False
    return True

count_vowels=HOF(len,vowels_list)


# def count_vowels(lst:list)->bool:
#     buf=len(lst[0])
#     for i in lst:
#         if buf !=len(i):return False
#     return True

print(count_vowels)








